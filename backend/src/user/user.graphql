scalar Upload

type User {
  id: ID!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  createdAt: String!
  online: Boolean
  avatar: File
}

type Query {
  me: User
  getNewUsers: [User]
  searchUser(name: String): [User]
}

type Mutation {
  updatePassword(input: UpdatePasswordInput): String
  updateUser(input: UpdateInput, file: Upload): String
  signUp(input: SignUpInput, file: Upload): String
  signIn(input: SignInInput): String
}

input UpdateInput {
  email: String!
  firstName: String!
  lastName: String!
}

input UpdatePasswordInput {
  password: String!
  newPassword: String!
  repeatedPassword: String!
}

input SignUpInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input SignInInput {
  email: String!
  password: String!
}

type Subscription {
  userRegistred: User
  userOnline: UserOnline
}

type UserOnline {
  id: String
  online: Boolean
}
